import numpy as np

# Helper functions
def text_to_numbers(text):
    return [ord(char) - ord('A') for char in text.upper()]

def numbers_to_text(numbers):
    return ''.join(chr(num + ord('A')) for num in numbers)

def pad_text(text, block_size):
    padding = (block_size - len(text) % block_size) % block_size
    return text + 'X' * padding

def mod_inverse(matrix, modulus):
    determinant = int(round(np.linalg.det(matrix)))
    determinant_mod_inv = pow(determinant, -1, modulus)
    adjugate = np.round(determinant * np.linalg.inv(matrix)).astype(int)
    return (determinant_mod_inv * adjugate) % modulus

# Hill cipher implementation
def hill_encrypt(plaintext, key_matrix):
    block_size = key_matrix.shape[0]
    plaintext = pad_text(plaintext, block_size)
    plaintext_numbers = text_to_numbers(plaintext)
    
    ciphertext_numbers = []
    for i in range(0, len(plaintext_numbers), block_size):
        block = np.array(plaintext_numbers[i:i+block_size])
        encrypted_block = np.dot(key_matrix, block) % 26
        ciphertext_numbers.extend(encrypted_block)
    
    return numbers_to_text(ciphertext_numbers)

def hill_decrypt(ciphertext, key_matrix):
    block_size = key_matrix.shape[0]
    ciphertext_numbers = text_to_numbers(ciphertext)
    
    key_matrix_inverse = mod_inverse(key_matrix, 26)
    plaintext_numbers = []
    for i in range(0, len(ciphertext_numbers), block_size):
        block = np.array(ciphertext_numbers[i:i+block_size])
        decrypted_block = np.dot(key_matrix_inverse, block) % 26
        plaintext_numbers.extend(decrypted_block)
    
    return numbers_to_text(plaintext_numbers).rstrip('X')

# Example usage
if __name__ == "__main__":
    key_matrix = np.array([[6, 24, 1],
                           [13, 16, 10],
                           [20, 17, 15]])  # Example key matrix (3x3)

    plaintext = "HELLO"
    print("Plaintext:", plaintext)
    
    ciphertext = hill_encrypt(plaintext, key_matrix)
    print("Ciphertext:", ciphertext)
    
    decrypted_text = hill_decrypt(ciphertext, key_matrix)
    print("Decrypted Text:", decrypted_text)
